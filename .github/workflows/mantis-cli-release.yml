name: Mantis CLI Release
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
        releaseType:
          description: 'What kind of release is this?'
          required: true
          type: choice
          options:
            - 'major'
            - 'minor'
            - 'patch'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ncoder2/ncoder2mantis

jobs:
  build-and-push-image:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python and Git
        uses: ./.github/actions/setup-python-and-git
        with:
          python-version: '3.9'

      - name: Install requirements
        run: |
          python -m pip install generate-changelog bump-my-version

      - name: Determine release type
        id: determine_release_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TYPE="${{ github.event.inputs.releaseType }}"
          else
            if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
              RELEASE_TYPE="minor"  # Default case
            elif [[ "${GITHUB_REF}" == refs/heads/feature/* ]]; then
              RELEASE_TYPE="minor"  # Feature branches
            elif [[ "${GITHUB_REF}" == refs/heads/bugfix/* ]]; then
              RELEASE_TYPE="patch"  # Bug fix branches
            elif [[ "${GITHUB_REF}" == refs/heads/release/* ]]; then
              RELEASE_TYPE="major"  # Release branches
            elif [[ "${GITHUB_REF}" == refs/heads/dev/* ]]; then
              RELEASE_TYPE="dev"    # Development branches
            else
              RELEASE_TYPE="auto"   # Default if no match
            fi
          fi
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          bump-my-version bump --allow-dirty --verbose --no-commit "${{ env.RELEASE_TYPE }}"
          new_version=$(bump-my-version show current_version)
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "TAG_NAME=$new_version" >> $GITHUB_ENV
          git commit -am "Bump version to $new_version"
          git tag $new_version
          echo "PACKAGE=true" >> $GITHUB_ENV
          
      - name: Push version bump commit and tag
        run: |
          git push origin main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify NEW_VERSION
        run: |
          echo "New version is: ${{ env.NEW_VERSION }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }}
          labels: ${{ steps.meta.outputs.labels }}
